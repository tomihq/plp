Implementar métodos para los siguientes mensajes.

a) curry cuyo objeto receptor es un bloque de dos parámetros y su resultado es un bloque similar al original pero currificado.

Por ejemplo, la siguiente ejecución evalúa a 12.

| curried new |
curried := [:x :res | x + res] curry.
new := curried value: 10.
new value: 2.

Osea lo que tiene que hacer el mensaje curry es básicamente recibir un bloque que toma dos parámetros, encapsularlo en un bloque que recibe un parámetro y adentro tiene otro bloque que recibe el segundo parámetro y por último devuelve que si ejecuta el bloque que haga un ejecucionBloque value: x value: y

curry
^[ :x | [ :y | self value:x value:y ] ].

b) flip 
Similar al anterior, recibo un bloque que tiene dos argumentos y lo que hago es devolver un nuevo bloque que sea el mismo con el cuerpo y todo pero con los parámetros al revés. 
^[ :x :y | self value: y value: x ]

c) timesRepeat
La idea es que, en la clase del numero haya un metodo que sea timesRepeat y reciba un bloque.
El bloque en sí no me importa mucho, sino que la idea es ejecutarlo self cantidad de veces.
Entonces, podría hacer una especie de ciclo que si el numero (self) al haberlo disminuido es 0 salgo y devuelvo el valor del bloque.

timesDo: aBlock
| count |
count := 1.
[count <= self]
	whileTrue:
		[aBlock value. count := count + 1]

forma recursiva
timesDo: aBlock
self > 0 ifFalse: ^self.
aBlock value.
self - 1 timesDo: aBlock. 

Devolvemos self nomás, total no se usa para nada.
