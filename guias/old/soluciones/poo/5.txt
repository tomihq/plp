Dada la siguiente implementación:
Integer << factorialsList 
    |list|
    list := OrderedCollection with: 1.
    2 to: self do: [:aNumber | list add: (list last) * aNumber ].
    ^list.

¿Cual es el resultado de evaluar las siguientes expresiones? ¿Quien es el receptor del mensaje #factorialsList en cada caso? 

number: 3
list := [1]
desde 2 hasta 3
    1 * 2 -> [1, 2]
    2 * 3 -> [1, 2, 6]

Lo que hace este código es tomar un número entero, llamar al método de instancia llamado factorialsList que define una variable local lista.
Esa lista la inicializa con un solo elemento, el 1.
Luego, hace un ciclo diciendo que: desde 2 hasta "el numero que representa mi instancia" hacer lo siguiente: por cada numero, del 2 hasta "el numero que representa mi instancia" agregá la lista definida localmente, el último elemento * el número actual que está recorriendo.

a) No funciona. Porque factorialsList es un método de instancia que se utiliza cuando tenemos instanciado un entero. Entonces, da error porque el mensaje no lo estamos mandando a una instancia de entero válido.
b) No funciona, Integer no se puede usar como si fuese una instancia porque es solamente una clase.
c) Funciona. El mensaje es factorialsList y el receptor del mensaje es 3. 
El proceso seria el siguiente:
list = [1]
[1 * 2] -> [1, 2]
[2 * 3] -> [1, 2, 6]

El resultado entonces es la lista [1, 2, 6]

d) Funciona, hace la operación de generar la lista de factorialsList con el 5 y luego agarra el 4 elemento de la lista.
list = [1]
[1 * 2] -> [1, 2]
[2 * 3] -> [1, 2, 6]
[6 * 4] -> [1, 2, 6, 24]
[24 * 5] -> [1, 2, 6, 24, 120]

El resultado es 120.

e) No funciona porque no la lista no tiene ese tamaño.


