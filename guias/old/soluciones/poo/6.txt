Mostrar un ejemplo por cada uno de los siguientes mensajes que pueden enviarse a las colecciones en el lenguaje Smalltalk. Indicar a qué evalúan dichos ejemplos.

#collect: es el map. 
| res |
res := #(1 2 4) collect: [:numero | numero * 2].

El resultado sería multiplicar por dos todos los elementos de la lista, es decir, [2, 4, 8].

#select: es el filter 
| res |
res := #(1 2 3) collect: [:numero | numero = 1 ].

El resultado sería [1]

#inject: into: Es un reduce de JavaScript. El primer argumento es el resultado de la llamada anterior y el segundo el elemento actual.

listaNumeros := OrderedCollection with: 1 with: 2 with: 3.
listaNumerosSuma := listaNumeros 
inject: 0 
into: [ :result :elem | result + elem ].

El resultado seria 6.

#reduce: (o #fold): Es el foldl que conocemos, hace algo de izquierda a derecha. 
#(10 20 5 30 15) reduce: [:max :each | max max: each].
El resultado en este ejemplo sería el 30.
#(1 2 3 4 5) reduce: [:product :each | product * each].
El resultado en este ejemplo sería 120.

#reduceRight: es un foldr convencional. Resuelve de derecha a izquierda.
#(1 2 3 6) reduceRight: [:acc :each | each-acc].
El resultado en este ejemplo sería 0.

#do: recorre una lista sin devolver un resultado, por ejemplo hacer un print o hacer efectos secundarios (similar a un foreach).

listaNumeros := OrderedCollection with: 1 with: 2 with: 3.
listaNumeros2 := OrderedCollection new.
listaNumeros do: [ :each | listaNumeros2 add: each + 1 ].

En este caso, listaNumeros2 termina teniendo los valores de [2, 3, 4].



